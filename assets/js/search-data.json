{
  
    
        "post0": {
            "title": "Profitable App Profiles for iOS and Android",
            "content": ". Overview . Welcome. In this project, we will be working on data about different types of apps and their corresponding number of users. The goal is to determine which apps can best attract the largest number of users. . This will help a hypothetical app company make decisions regarding what apps to develop in the near future. This app company only makes free apps directed toward an English-speaking audience. This information will be considered in the criteria. . Note: I wrote this notebook as a Dataquest guided project. The hypothetical app company situation and project flow came from Dataquest&#8217;s course. However, all of the text and code here are written by me unless stated otherwise. . Tip: Click the Github badge at the top right of this article in order to view this as a static notebook on my GitHub repository. Click the Colab badge or Binder badge for an interactive notebook environment. . Package Installs . import pandas as pd import numpy as np import matplotlib.pyplot as plt import re . App Data Overview . This project uses two datasets. . The Google Play Store dataset lists over 10,000 Android apps. | The Apple App Store dataset lists over 7,000 iOS apps. | . data_apple = pd.read_csv(&quot;./2021-05-08-Files/AppleStore.csv&quot;, header = 0) data_google = pd.read_csv(&quot;./2021-05-08-Files/googleplaystore.csv&quot;, header = 0) . Apple App Store dataset . print(data_apple.shape) . (7197, 16) . The dataset has 7197 rows (1 row per app), and 16 columns which describe these apps. . According to the Kaggle documentation (Mobile App Store ( 7200 apps)), the following are the columns and their meanings. . &quot;id&quot; : App ID | &quot;track_name&quot;: App Name | &quot;size_bytes&quot;: Size (in Bytes) | &quot;currency&quot;: Currency Type | &quot;price&quot;: Price amount | &quot;ratingcounttot&quot;: User Rating counts (for all version) | &quot;ratingcountver&quot;: User Rating counts (for current version) | &quot;user_rating&quot; : Average User Rating value (for all version) | &quot;userratingver&quot;: Average User Rating value (for current version) | &quot;ver&quot; : Latest version code | &quot;cont_rating&quot;: Content Rating | &quot;prime_genre&quot;: Primary Genre | &quot;sup_devices.num&quot;: Number of supporting devices | &quot;ipadSc_urls.num&quot;: Number of screenshots showed for display | &quot;lang.num&quot;: Number of supported languages | &quot;vpp_lic&quot;: Vpp Device Based Licensing Enabled | . A sample of the first 5 rows of the dataset is shown below. . data_apple.head() . id track_name size_bytes currency price rating_count_tot rating_count_ver user_rating user_rating_ver ver cont_rating prime_genre sup_devices.num ipadSc_urls.num lang.num vpp_lic . 0 284882215 | Facebook | 389879808 | USD | 0.0 | 2974676 | 212 | 3.5 | 3.5 | 95.0 | 4+ | Social Networking | 37 | 1 | 29 | 1 | . 1 389801252 | Instagram | 113954816 | USD | 0.0 | 2161558 | 1289 | 4.5 | 4.0 | 10.23 | 12+ | Photo &amp; Video | 37 | 0 | 29 | 1 | . 2 529479190 | Clash of Clans | 116476928 | USD | 0.0 | 2130805 | 579 | 4.5 | 4.5 | 9.24.12 | 9+ | Games | 38 | 5 | 18 | 1 | . 3 420009108 | Temple Run | 65921024 | USD | 0.0 | 1724546 | 3842 | 4.5 | 4.0 | 1.6.2 | 9+ | Games | 40 | 5 | 1 | 1 | . 4 284035177 | Pandora - Music &amp; Radio | 130242560 | USD | 0.0 | 1126879 | 3594 | 4.0 | 4.5 | 8.4.1 | 12+ | Music | 37 | 4 | 1 | 1 | . Google Play Store dataset . print(data_google.shape) . (10841, 13) . The dataset has 10841 rows and 13 columns. . The column names are self-explanatory, so the Kaggle documentation (Google Play Store Apps) does not describe them. . print(list(data_google.columns)) . [&#39;App&#39;, &#39;Category&#39;, &#39;Rating&#39;, &#39;Reviews&#39;, &#39;Size&#39;, &#39;Installs&#39;, &#39;Type&#39;, &#39;Price&#39;, &#39;Content Rating&#39;, &#39;Genres&#39;, &#39;Last Updated&#39;, &#39;Current Ver&#39;, &#39;Android Ver&#39;] . Below is a sample of the dataset. . data_google.head() . App Category Rating Reviews Size Installs Type Price Content Rating Genres Last Updated Current Ver Android Ver . 0 Photo Editor &amp; Candy Camera &amp; Grid &amp; ScrapBook | ART_AND_DESIGN | 4.1 | 159 | 19M | 10,000+ | Free | 0 | Everyone | Art &amp; Design | January 7, 2018 | 1.0.0 | 4.0.3 and up | . 1 Coloring book moana | ART_AND_DESIGN | 3.9 | 967 | 14M | 500,000+ | Free | 0 | Everyone | Art &amp; Design;Pretend Play | January 15, 2018 | 2.0.0 | 4.0.3 and up | . 2 U Launcher Lite – FREE Live Cool Themes, Hide ... | ART_AND_DESIGN | 4.7 | 87510 | 8.7M | 5,000,000+ | Free | 0 | Everyone | Art &amp; Design | August 1, 2018 | 1.2.4 | 4.0.3 and up | . 3 Sketch - Draw &amp; Paint | ART_AND_DESIGN | 4.5 | 215644 | 25M | 50,000,000+ | Free | 0 | Teen | Art &amp; Design | June 8, 2018 | Varies with device | 4.2 and up | . 4 Pixel Draw - Number Art Coloring Book | ART_AND_DESIGN | 4.3 | 967 | 2.8M | 100,000+ | Free | 0 | Everyone | Art &amp; Design;Creativity | June 20, 2018 | 1.1 | 4.4 and up | . Data Cleaning . Before analysis, the data must first be cleaned of unwanted datapoints. . Inaccurate Data . This Kaggle discussion about the Google Play dataset indicates that row 10472 (excluding the header) has an error. . Below, I have printed row 0 and row 10472 so that these can be compared. . data_google.iloc[[0, 10472]] . App Category Rating Reviews Size Installs Type Price Content Rating Genres Last Updated Current Ver Android Ver . 0 Photo Editor &amp; Candy Camera &amp; Grid &amp; ScrapBook | ART_AND_DESIGN | 4.1 | 159 | 19M | 10,000+ | Free | 0 | Everyone | Art &amp; Design | January 7, 2018 | 1.0.0 | 4.0.3 and up | . 10472 Life Made WI-Fi Touchscreen Photo Frame | 1.9 | 19.0 | 3.0M | 1,000+ | Free | 0 | Everyone | NaN | February 11, 2018 | 1.0.19 | 4.0 and up | NaN | . As we look at row 10472 in the context of the column headers and row 0, the following things become clear. . The &quot;Category&quot; value is not present. Thus, all values to the right of it have been shifted leftward. | The &quot;Android Ver&quot; column was left with a missing value. | . Thus, this row will be removed. . if data_google.iloc[10472, 0] == &#39;Life Made WI-Fi Touchscreen Photo Frame&#39;: # This if-statement prevents more rows from being deleted # if the cell is run again. data_google.drop(10472, inplace = True) print(&quot;The inaccurate row was deleted.&quot;) . The inaccurate row was deleted. . Duplicate Data . There are also duplicate app entries in the Google Play dataset. We can consider a row as a duplicates if another row exists that has the same &quot;App&quot; value. . Here, I count the total number of duplicate rows. This turns out to be 1979 rows. . def count_duplicates(df, col_name): &quot;&quot;&quot;Count the number of duplicate rows in a DataFrame. `col_name` is the name of the column to be used as a basis for duplicate values.&quot;&quot;&quot; all_apps = {} for index, row in df.iterrows(): name = row[col_name] all_apps.setdefault(name, []).append(index) duplicate_inds = [ind for lst in all_apps.values() for ind in lst if len(lst) &gt; 1] n_duplicates = &quot;Duplicates: {}&quot;.format(len(duplicate_inds)) duplicate_rows = df.iloc[duplicate_inds] return n_duplicates, duplicate_rows google_dupes = count_duplicates(data_google, &quot;App&quot;) print(google_dupes[0]) . Duplicates: 1979 . As an example, there are 4 rows for Instagram: . ig_filter = data_google[&quot;App&quot;] == &quot;Instagram&quot; ig_rows = data_google.loc[ig_filter] . ig_rows . App Category Rating Reviews Size Installs Type Price Content Rating Genres Last Updated Current Ver Android Ver . 2545 Instagram | SOCIAL | 4.5 | 66577313 | Varies with device | 1,000,000,000+ | Free | 0 | Teen | Social | July 31, 2018 | Varies with device | Varies with device | . 2604 Instagram | SOCIAL | 4.5 | 66577446 | Varies with device | 1,000,000,000+ | Free | 0 | Teen | Social | July 31, 2018 | Varies with device | Varies with device | . 2611 Instagram | SOCIAL | 4.5 | 66577313 | Varies with device | 1,000,000,000+ | Free | 0 | Teen | Social | July 31, 2018 | Varies with device | Varies with device | . 3909 Instagram | SOCIAL | 4.5 | 66509917 | Varies with device | 1,000,000,000+ | Free | 0 | Teen | Social | July 31, 2018 | Varies with device | Varies with device | . Looking closely, we can see that duplicate rows are not exactly identical. The &quot;Reviews&quot; column, which shows the total number of reviews of the app, has different values. . It can be inferred that the row with the largest value is the newest entry for the app. Therefore, all duplicate rows will be dropped except for the ones with the largest &quot;Reviews&quot; values. . def remove_duplicates(df, name_col, reviews_col): # Each key-value pair will follow the format: # {&quot;App Name&quot;: maximum number of reviews among all duplicates} reviews_max = {} for index, row in df.iterrows(): name = row[name_col] n_reviews = int(row[reviews_col]) if n_reviews &gt; reviews_max.get(name, -1): reviews_max[name] = n_reviews # List of duplicate indices to drop, # excluding the row with the highest number of reviews # among that app&#39;s duplicate rows. indices_to_drop = [] # Rows with names that have already been added into this list # will be dropped. already_added = [] for index, row in df.iterrows(): name = row[name_col] n_reviews = int(row[reviews_col]) if (name not in already_added) and (n_reviews == reviews_max[name]): already_added.append(name) else: indices_to_drop.append(index) # Remove duplicates and return the clean dataset. clean = df.drop(indices_to_drop) return clean android_clean = remove_duplicates(data_google, &quot;App&quot;, &quot;Reviews&quot;) print(android_clean.shape) . (9659, 13) . After duplicates were removed, the Google Play dataset was left with 9659 rows. . As for the Apple App Store dataset, there are 4 duplicate rows. . apple_dupes = count_duplicates(data_apple, &quot;track_name&quot;) print(apple_dupes[0]) apple_dupes[1] . Duplicates: 4 . id track_name size_bytes currency price rating_count_tot rating_count_ver user_rating user_rating_ver ver cont_rating prime_genre sup_devices.num ipadSc_urls.num lang.num vpp_lic . 2948 1173990889 | Mannequin Challenge | 109705216 | USD | 0.0 | 668 | 87 | 3.0 | 3.0 | 1.4 | 9+ | Games | 37 | 4 | 1 | 1 | . 4463 1178454060 | Mannequin Challenge | 59572224 | USD | 0.0 | 105 | 58 | 4.0 | 4.5 | 1.0.1 | 4+ | Games | 38 | 5 | 1 | 1 | . 4442 952877179 | VR Roller Coaster | 169523200 | USD | 0.0 | 107 | 102 | 3.5 | 3.5 | 2.0.0 | 4+ | Games | 37 | 5 | 1 | 1 | . 4831 1089824278 | VR Roller Coaster | 240964608 | USD | 0.0 | 67 | 44 | 3.5 | 4.0 | 0.81 | 4+ | Games | 38 | 0 | 1 | 1 | . The &quot;rating_count_tot&quot; column in the Apple App Store dataset is like the &quot;Reviews&quot; column in the Google Play dataset. It tells the total number of reviews so far. Therefore, Apple App Store dataset duplicates can be removed by keeping the rows with the highest rating count totals. . ios_clean = remove_duplicates(data_apple, &quot;track_name&quot;, &quot;rating_count_tot&quot;) print(ios_clean.shape) . (7195, 16) . From 7197 rows, there are now 7195 rows in the Apple App Store dataset. . Non-English Apps . The hypothetical app company who will use this analysis is a company that only makes apps in English. Thus, all apps with non-English titles shall be removed from the datasets. . The task now is to identify titles which are not in English. It is known that in the ASCII table, the characters most commonly used in English are within codes 0 to 127. Some English app titles may have special characters or emojis, though, so I will only remove titles which have more than 3 characters outside of the normal range. . def is_english(text): unicode = [ord(char) for char in text] normal = [(code &gt;= 0 and code &lt;= 127) for code in unicode] non_english = len(text) - sum(normal) return non_english &lt;= 3 def keep_english(df, name_col): &quot;&quot;&quot;Return a new DataFrame containing only rows with English names.&quot;&quot;&quot; remove_indices = [] for index, row in df.iterrows(): name = row[name_col] if not is_english(name): remove_indices.append(index) return df.drop(remove_indices) android_clean = keep_english(android_clean, &quot;App&quot;) ios_clean = keep_english(ios_clean, &quot;track_name&quot;) print(&quot;Google Play Store Dataset:&quot;, android_clean.shape) print(&quot;Apple App Store Dataset:&quot;, ios_clean.shape) . Google Play Store Dataset: (9614, 13) Apple App Store Dataset: (6181, 16) . Now, there are only English apps in both datasets. . Paid Apps . As mentioned earlier, the app company only makes free apps. Therefore, data on paid apps is irrelevant to this analysis. Paid apps shall be identified and removed from both datasets. . def remove_paid(df, price_col): &quot;&quot;&quot;Return a new DataFrame without paid apps.&quot;&quot;&quot; remove_indices = [] for index, row in df.iterrows(): price = str(row[price_col]) # Keep characters that are numeric or periods. price = float(re.sub(&quot;[^0-9.]&quot;, &quot;&quot;, price)) if price != 0.0: remove_indices.append(index) return df.drop(remove_indices) android_clean = remove_paid(android_clean, &quot;Price&quot;) ios_clean = remove_paid(ios_clean, &quot;price&quot;) print(&quot;Google Play Store Dataset:&quot;, android_clean.shape) print(&quot;Apple App Store Dataset:&quot;, ios_clean.shape) . Google Play Store Dataset: (8864, 13) Apple App Store Dataset: (3220, 16) . Now that the datasets have been cleaned, we can proceed with our main objective, which is to determine a profitable app profile. . App Company&#39;s Context . Before thinking of an app profile, we must know the context of the app company so that we can align our analysis with it. . Since they only develop free apps, they get revenue from in-app advertisements. Thus, they rely on having a large number of users so that they can generate more revenue. . An app should ideally also be successful on both Google Play Store and the Apple App Store. The reason is that the (hypothetical) company has the following 3-step validation strategy: . (from the Dataquest guided project) . Build a minimal Android version of the app, and add it to Google Play. | If the app has a good response from users, we develop it further. | If the app is profitable after six months, we build an iOS version of the app and add it to the App Store. | Common App Genres . With these criteria in mind, the first step would be to find out which genres of apps are most common in both app markets. If an app genre is common, then there may be high demand for it among users. . Let us now look at the column headers for both datasets to see which columns can give information about genres. . print(&quot;Google Play Store&quot;) android_clean.head() . Google Play Store . App Category Rating Reviews Size Installs Type Price Content Rating Genres Last Updated Current Ver Android Ver . 0 Photo Editor &amp; Candy Camera &amp; Grid &amp; ScrapBook | ART_AND_DESIGN | 4.1 | 159 | 19M | 10,000+ | Free | 0 | Everyone | Art &amp; Design | January 7, 2018 | 1.0.0 | 4.0.3 and up | . 2 U Launcher Lite – FREE Live Cool Themes, Hide ... | ART_AND_DESIGN | 4.7 | 87510 | 8.7M | 5,000,000+ | Free | 0 | Everyone | Art &amp; Design | August 1, 2018 | 1.2.4 | 4.0.3 and up | . 3 Sketch - Draw &amp; Paint | ART_AND_DESIGN | 4.5 | 215644 | 25M | 50,000,000+ | Free | 0 | Teen | Art &amp; Design | June 8, 2018 | Varies with device | 4.2 and up | . 4 Pixel Draw - Number Art Coloring Book | ART_AND_DESIGN | 4.3 | 967 | 2.8M | 100,000+ | Free | 0 | Everyone | Art &amp; Design;Creativity | June 20, 2018 | 1.1 | 4.4 and up | . 5 Paper flowers instructions | ART_AND_DESIGN | 4.4 | 167 | 5.6M | 50,000+ | Free | 0 | Everyone | Art &amp; Design | March 26, 2017 | 1.0 | 2.3 and up | . print(&quot; nApple App Store&quot;) ios_clean.head() . Apple App Store . id track_name size_bytes currency price rating_count_tot rating_count_ver user_rating user_rating_ver ver cont_rating prime_genre sup_devices.num ipadSc_urls.num lang.num vpp_lic . 0 284882215 | Facebook | 389879808 | USD | 0.0 | 2974676 | 212 | 3.5 | 3.5 | 95.0 | 4+ | Social Networking | 37 | 1 | 29 | 1 | . 1 389801252 | Instagram | 113954816 | USD | 0.0 | 2161558 | 1289 | 4.5 | 4.0 | 10.23 | 12+ | Photo &amp; Video | 37 | 0 | 29 | 1 | . 2 529479190 | Clash of Clans | 116476928 | USD | 0.0 | 2130805 | 579 | 4.5 | 4.5 | 9.24.12 | 9+ | Games | 38 | 5 | 18 | 1 | . 3 420009108 | Temple Run | 65921024 | USD | 0.0 | 1724546 | 3842 | 4.5 | 4.0 | 1.6.2 | 9+ | Games | 40 | 5 | 1 | 1 | . 4 284035177 | Pandora - Music &amp; Radio | 130242560 | USD | 0.0 | 1126879 | 3594 | 4.0 | 4.5 | 8.4.1 | 12+ | Music | 37 | 4 | 1 | 1 | . For Google Play, some columns that seem relevant are &quot;Category&quot; and &quot;Genres&quot;. For the Apple App Store, the relevant column is &quot;prime_genre&quot;. . We can determine the most common genres by using frequency tables of the mentioned columns. . def freq_table(df, label): &quot;&quot;&quot;Return a frequency table of the values in a column of a DataFrame.&quot;&quot;&quot; col = df[label] freq = {} for value in col: freq.setdefault(value, 0) freq[value] += 1 for key in freq: freq[key] /= len(df) / 100 freq_series = pd.Series(freq).sort_values(ascending = False) return freq_series def sr_to_df(sr, col_name = &quot;number&quot;, n_head = None): &quot;&quot;&quot;Return a DataFrame by resetting the index of a Series.&quot;&quot;&quot; df = sr.rename(col_name).reset_index().rename(columns = {&quot;index&quot;:&quot;name&quot;}) if n_head is not None: df = df.head(n_head) return df google_categories = freq_table(android_clean, &quot;Category&quot;) google_genres = freq_table(android_clean, &quot;Genres&quot;) apple_genres = freq_table(ios_clean, &quot;prime_genre&quot;) . The frequency tables will be inspected in the sections below. Only the top positions in each table will be shown, for brevity. . Apple App Store: Prime Genres . First, the frequency table of Apple App Store prime genres shall be analyzed. Below, I have ordered the table by frequency, descending. I have also made bar graphs showing the top 10 positions in each frequency table. . sr_to_df(apple_genres, &quot;percentage&quot;, n_head = 5) . name percentage . 0 Games | 58.136646 | . 1 Entertainment | 7.888199 | . 2 Photo &amp; Video | 4.968944 | . 3 Education | 3.664596 | . 4 Social Networking | 3.291925 | . import altair as alt def bar_n(series, chart_title, ylabel, n = 10): &quot;&quot;&quot;Takes a series and outputs a bar graph of the first n items.&quot;&quot;&quot; series.index.name = &quot;index&quot; df = series.rename(&quot;number&quot;).reset_index() df[&quot;number&quot;] = [round(i, 2) for i in df[&quot;number&quot;]] df = df[:n] bar = alt.Chart(df).mark_bar().encode( x = alt.X(&quot;index&quot;, title = &quot;Name&quot;, sort = &quot;-y&quot;), y = alt.Y(&quot;number&quot;, title = ylabel), ).properties( title = chart_title, ) text = bar.mark_text( align = &#39;center&#39;, baseline = &#39;middle&#39;, dy = -5, # Nudge text upward ).encode( text = &#39;number:Q&#39; ) chart = (bar + text).properties( width = 700, height = 400, ) return chart bar_n( apple_genres, &quot;Top 10 Most Common Prime Genres of iOS Apps&quot;, &quot;Percentage of Apps&quot;, ) . The top 5 most common prime genres in the Apple App Store are Games, Entertainment, Photo &amp; Video, Education, and Social Networking. Games are at the top, occupying over 58% of all apps. This is a much higher percentage than any other single genre occupies. . Important: The general impression is that there are many more iOS apps that are entertainment-related apps compared to practical apps. . Google Play Store: Categories . Next, below is the frequency table for Google Play Store app categories. . sr_to_df(google_categories, &quot;percentage&quot;, 5) . name percentage . 0 FAMILY | 18.907942 | . 1 GAME | 9.724729 | . 2 TOOLS | 8.461191 | . 3 BUSINESS | 4.591606 | . 4 LIFESTYLE | 3.903430 | . bar_n( google_categories, &quot;Top 10 Most Common Categories of Android Apps&quot;, &quot;Percentage of Apps&quot;, ) . The picture here seems to be different. The most common category is Family occupying almost 19% of all apps, followed by Game, Tools, Business, and Lifestyle. . Important: The table suggests that practical app categories are more common in Google Play than in the Apple App Store. . Google Play Store: Genres . Lastly, below is the frequency table for Google Play Store app genres. . sr_to_df(google_genres, &quot;percentage&quot;, 5) . name percentage . 0 Tools | 8.449910 | . 1 Entertainment | 6.069495 | . 2 Education | 5.347473 | . 3 Business | 4.591606 | . 4 Productivity | 3.892148 | . bar_n( google_genres, &quot;Top 10 Most Common Genres of Android Apps&quot;, &quot;Percentage of Apps&quot;, ) . There are 114 genres in this table, so it is not fully displayed. However, it would appear that the top 5 genres are Tools (8%), Entertainment, Education, Business, and Lifestyle. Like with the categories, practical apps are very common. . However, I noticed something special about this frequency table. Some genres are actually combinations of multiple genres, separated by semi-colons. If I can extract and count individual genres from these combined genres, then I can get a more accurate idea of app genres in the Google Play Store. . Note: This frequency table will show numbers instead of percentages. Since the genres overlap, the percentages would add up to greater than 100%. . freq = {} for value in android_clean[&quot;Genres&quot;]: genres = value.split(&quot;;&quot;) for genre in genres: freq.setdefault(genre, 0) freq[genre] += 1 google_genres_split = pd.Series(freq).sort_values(ascending = False) sr_to_df(google_genres_split, n_head = 5) . name number . 0 Tools | 750 | . 1 Education | 606 | . 2 Entertainment | 569 | . 3 Business | 407 | . 4 Lifestyle | 347 | . bar_n( google_genres_split, &quot;Top 10 Most Common Genres of Android Apps (Split Up)&quot;, &quot;Number of Apps&quot;, ) . It can be seen that the frequency table has slightly different placements now. However, the top genres are still Tools, Education, Entertainment, Business, and Lifestyle. Practical app genres are very common in the Google Play Store. They are more common here than in the Apple App Store. . Important: Based on the results, the Google Play Store has a selection of apps that is more balanced between entertainment and practicality. . . Going back to the the frequency table of Categories, since it seems that each Category represents a group of Genres. For example, one would expect apps in the Simulation, Arcade, Puzzle, Strategy, etc. genres to be under the Game category. It was shown earlier that this category is the 2nd most common in the Google Play Store. . The Categories column is more general and gives a more accurate picture of the common types of apps. Thus, from here on, I will be analyzing only the &quot;Category&quot; column and not the &quot;Genres&quot; column. . Note: I will now use &quot;app type&quot; to generally refer to the Apple App Store&#8217;s &quot;prime_genre&quot; values or the Google Play Store&#8217;s &quot;Category&quot; values. . App Types by Number of Users . We first looked at app types in terms of how common they are in the two app markets. Now, we shall see how many users there are for each app type. . Apple App Store: Rating Counts . In the Apple App Store dataset, there is no column that indicates the number of users. . print(list(ios_clean.columns)) . [&#39;id&#39;, &#39;track_name&#39;, &#39;size_bytes&#39;, &#39;currency&#39;, &#39;price&#39;, &#39;rating_count_tot&#39;, &#39;rating_count_ver&#39;, &#39;user_rating&#39;, &#39;user_rating_ver&#39;, &#39;ver&#39;, &#39;cont_rating&#39;, &#39;prime_genre&#39;, &#39;sup_devices.num&#39;, &#39;ipadSc_urls.num&#39;, &#39;lang.num&#39;, &#39;vpp_lic&#39;] . However, the &quot;rating_count_tot&quot; column exists. It indicates the total number of ratings given to each app. We can use it as a proxy for the number of users of each app. . The function below will return a Series showing the average number of users per app within each type. (Not the total number of users per type.) . def users_by_type(df, type_col, users_col, moct = &quot;mean&quot;): &quot;&quot;&quot;Return a Series that maps each app type to the average number of users per app for that type. Specify &#39;mean&#39; or &#39;median&#39; for the measure of central tendency.&quot;&quot;&quot; dct = {} for index, row in df.iterrows(): app_type = row[type_col] users = row[users_col] dct.setdefault(app_type, []).append(users) dct2 = {} for app_type in dct: counts = dct[app_type] if moct == &quot;mean&quot;: dct2[app_type] = np.mean(counts) elif moct == &quot;median&quot;: dct2[app_type] = np.median(counts) result = pd.Series(dct2).sort_values(ascending = False) return result ios_users = users_by_type(ios_clean, &quot;prime_genre&quot;, &quot;rating_count_tot&quot;) sr_to_df(ios_users, n_head = 5) . name number . 0 Navigation | 86090.333333 | . 1 Reference | 74942.111111 | . 2 Social Networking | 71548.349057 | . 3 Music | 57326.530303 | . 4 Weather | 52279.892857 | . bar_n( ios_users, &quot;Top 10 Most Popular iOS App Types&quot;, &quot;Mean Number of Users per App&quot;, ) . The top 5 iOS app types with the highest mean average number of users per app are Navigation, Reference, Social Networking, Music, and Weather. . However, these mean averages may be skewed by a few particularly popular apps. For example, let us look at the number of users of the top 5 Navigation apps. . ios_nav = ios_clean[[ &quot;track_name&quot;, &quot;rating_count_tot&quot;, ]].loc[ ios_clean[&quot;prime_genre&quot;] == &quot;Navigation&quot; ].sort_values( by = &quot;rating_count_tot&quot;, ascending = False, ).set_index( &quot;track_name&quot;, ) # `ios_nav` is still a DataFrame at this point. # It becomes a Series below. ios_nav = ios_nav[&quot;rating_count_tot&quot;] sr_to_df(ios_nav, n_head = 5) . track_name number . 0 Waze - GPS Navigation, Maps &amp; Real-time Traffic | 345046 | . 1 Google Maps - Navigation &amp; Transit | 154911 | . 2 Geocaching® | 12811 | . 3 CoPilot GPS – Car Navigation &amp; Offline Maps | 3582 | . 4 ImmobilienScout24: Real Estate Search in Germany | 187 | . bar_n( ios_nav, &quot;iOS Navigation Apps by Popularity&quot;, &quot;Number of Users&quot;, ) . Clearly, the distribution is skewed because Waze has such a high number of users. Therefore, a better measure of central tendency to use would be the median, not the mean. . Let us repeat the analysis using the median this time: . ios_users = users_by_type( ios_clean, &quot;prime_genre&quot;, &quot;rating_count_tot&quot;, moct = &quot;median&quot;, ) sr_to_df(ios_users, n_head = 5) . name number . 0 Productivity | 8737.5 | . 1 Navigation | 8196.5 | . 2 Reference | 6614.0 | . 3 Shopping | 5936.0 | . 4 Social Networking | 4199.0 | . bar_n( ios_users, &quot;Top 10 Most Popular iOS App Types&quot;, &quot;Median Number of Users per App&quot;, ) . The top 5 most popular iOS apps by median number of users per app are: . Productivity | Navigation | Reference | Shopping | Social Networking | . These placements are quite different from the top 5 most common iOS apps (Games, Entertainment, Photo &amp; Video, Education, and Social Networking). . . . Important: We can say the following about the Apple App Store. . Apps for entertainment and fun, notably Games, are the most common apps. | Apps for practical purposes, notably Productivity, are the most popular apps. | . Google Play Store: Installs . Let us see which columns in the Google Play Store dataset can tell us about the number of users per app. . android_clean.head() . App Category Rating Reviews Size Installs Type Price Content Rating Genres Last Updated Current Ver Android Ver . 0 Photo Editor &amp; Candy Camera &amp; Grid &amp; ScrapBook | ART_AND_DESIGN | 4.1 | 159 | 19M | 10,000+ | Free | 0 | Everyone | Art &amp; Design | January 7, 2018 | 1.0.0 | 4.0.3 and up | . 2 U Launcher Lite – FREE Live Cool Themes, Hide ... | ART_AND_DESIGN | 4.7 | 87510 | 8.7M | 5,000,000+ | Free | 0 | Everyone | Art &amp; Design | August 1, 2018 | 1.2.4 | 4.0.3 and up | . 3 Sketch - Draw &amp; Paint | ART_AND_DESIGN | 4.5 | 215644 | 25M | 50,000,000+ | Free | 0 | Teen | Art &amp; Design | June 8, 2018 | Varies with device | 4.2 and up | . 4 Pixel Draw - Number Art Coloring Book | ART_AND_DESIGN | 4.3 | 967 | 2.8M | 100,000+ | Free | 0 | Everyone | Art &amp; Design;Creativity | June 20, 2018 | 1.1 | 4.4 and up | . 5 Paper flowers instructions | ART_AND_DESIGN | 4.4 | 167 | 5.6M | 50,000+ | Free | 0 | Everyone | Art &amp; Design | March 26, 2017 | 1.0 | 2.3 and up | . The &quot;Installs&quot; column seems like the best indicator of the number of users. . android_clean[[&quot;App&quot;, &quot;Installs&quot;]] . App Installs . 0 Photo Editor &amp; Candy Camera &amp; Grid &amp; ScrapBook | 10,000+ | . 2 U Launcher Lite – FREE Live Cool Themes, Hide ... | 5,000,000+ | . 3 Sketch - Draw &amp; Paint | 50,000,000+ | . 4 Pixel Draw - Number Art Coloring Book | 100,000+ | . 5 Paper flowers instructions | 50,000+ | . ... ... | ... | . 10836 Sya9a Maroc - FR | 5,000+ | . 10837 Fr. Mike Schmitz Audio Teachings | 100+ | . 10838 Parkinson Exercices FR | 1,000+ | . 10839 The SCP Foundation DB fr nn5n | 1,000+ | . 10840 iHoroscope - 2018 Daily Horoscope &amp; Astrology | 10,000,000+ | . 8864 rows × 2 columns . The column contains strings which indicate the general range of how many users installed the apps. Since we cannot find the exact number of installs, we will simply remove the &quot;+&quot; signs and convert the numbers into integers. . android_clean[&quot;Installs&quot;] = [int(re.sub(&quot;[,+]&quot;, &quot;&quot;, text)) for text in android_clean[&quot;Installs&quot;]] android_clean[[&quot;Installs&quot;]] . Installs . 0 10000 | . 2 5000000 | . 3 50000000 | . 4 100000 | . 5 50000 | . ... ... | . 10836 5000 | . 10837 100 | . 10838 1000 | . 10839 1000 | . 10840 10000000 | . 8864 rows × 1 columns . Let us now see which app categories are most popular. We will use the median average here, as we did for iOS apps. . android_users = users_by_type( android_clean, &quot;Category&quot;, &quot;Installs&quot;, moct = &quot;median&quot;, ) sr_to_df(android_users, n_head = 10) . name number . 0 ENTERTAINMENT | 1000000.0 | . 1 EDUCATION | 1000000.0 | . 2 GAME | 1000000.0 | . 3 PHOTOGRAPHY | 1000000.0 | . 4 SHOPPING | 1000000.0 | . 5 WEATHER | 1000000.0 | . 6 VIDEO_PLAYERS | 1000000.0 | . 7 COMMUNICATION | 500000.0 | . 8 FOOD_AND_DRINK | 500000.0 | . 9 HEALTH_AND_FITNESS | 500000.0 | . bar_n( android_users, &quot;Top 10 Most Popular Android App Types&quot;, &quot;Median Number of Users per App&quot;, n = 10, ) . Since the top 5 spots all had the same median number of users per app (1000000), the graph was expanded to include the top 10 spots. . It appears that the types of Android apps with the highest median number of users per app are: . GAME | VIDEO_PLAYERS | WEATHER | EDUCATION | ENTERTAINMENT | PHOTOGRAPHY | SHOPPING | . . . Important: We can say the following about the Google Play Store. . Both fun apps and practical apps are very common. | The most popular apps are also a mix of fun apps and practical apps. | . App Profile Ideas . Based on the results, we can now determine a profitable app profile for the hypothetical app company. . Here is a summary of the findings on the 2 app stores. . The Google Play Store has a balanced mix of fun and practical apps, so we can pick either kind. | On the other hand, the Apple App Store appears to be oversaturated with game apps, and practical apps are more popular. | . Therefore, in order to get the most users, the app company can set themselves apart in the Apple App Store by developing a useful practical app. . The most popular types of practical apps for the Apple App Store would be: . Productivity | Navigation | Reference | Shopping | . For the Google Play Store, these would be: . Weather | Education | Photography | Shopping | . Shopping appears in both lists, so it may be the most profitable type of app. However, the app company would have to make a unique app that has an edge over existing popular shopping apps. The same would apply for making a navigation app. . Considering that Reference and Education apps are popular, perhaps these two types could be combined into one app. First, let us find out the titles of the most popular apps in these genres. . reference_popularity = ios_clean[[ &quot;track_name&quot;, &quot;rating_count_tot&quot; ]].loc[ ios_clean[&quot;prime_genre&quot;] == &quot;Reference&quot; ].dropna( ).sort_values( &quot;rating_count_tot&quot;, ascending = False, ).set_index( &quot;track_name&quot;, )[&quot;rating_count_tot&quot;] sr_to_df(reference_popularity, n_head = 10) . track_name number . 0 Bible | 985920 | . 1 Dictionary.com Dictionary &amp; Thesaurus | 200047 | . 2 Dictionary.com Dictionary &amp; Thesaurus for iPad | 54175 | . 3 Google Translate | 26786 | . 4 Muslim Pro: Ramadan 2017 Prayer Times, Azan, Q... | 18418 | . 5 New Furniture Mods - Pocket Wiki &amp; Game Tools ... | 17588 | . 6 Merriam-Webster Dictionary | 16849 | . 7 Night Sky | 12122 | . 8 City Maps for Minecraft PE - The Best Maps for... | 8535 | . 9 LUCKY BLOCK MOD ™ for Minecraft PC Edition - T... | 4693 | . bar_n( reference_popularity, &quot;Top 10 Most Popular iOS Reference Apps&quot;, &quot;Number of Users&quot;, ) . education_popularity = android_clean[[ &quot;App&quot;, &quot;Installs&quot; ]].loc[ android_clean[&quot;Category&quot;] == &quot;EDUCATION&quot; ].dropna( ).sort_values( &quot;Installs&quot;, ascending = False, ).set_index( &quot;App&quot;, )[&quot;Installs&quot;] sr_to_df(education_popularity, n_head = 5) . App number . 0 Quizlet: Learn Languages &amp; Vocab with Flashcards | 10000000 | . 1 Learn languages, grammar &amp; vocabulary with Mem... | 10000000 | . 2 Learn English with Wlingua | 10000000 | . 3 Remind: School Communication | 10000000 | . 4 Math Tricks | 10000000 | . bar_n( education_popularity, &quot;Top 10 Most Popular Android Education Apps&quot;, &quot;Number of Users&quot;, ) . The most popular Reference apps are the Bible and some dictionary and translation apps. The most popular Education apps teach languages (especially English), or Math. . Therefore, the following are some ideas of a profitable app: . An app containing the Bible, another religious text, or another well-known text. The app can additionally include reflections, analyses, or quizzes about the text. | An app that contains an English dictionary, a translator, and some quick guides on English vocabulary and grammar. An app like the above, but for a different language that is spoken by many people. | . | An app that teaches English and Math lessons. Perhaps it could be marketed as a practice app for an entrance exam. | . Conclusion . In this project, we analyzed app data from a Google Play Store dataset and an Apple App Store dataset. Apps were limited to free apps targeted towards English speakers, because the hypothetical app company makes these kinds of apps. The most common and popular app genres were determined. . In the end, several ideas of profitable apps were listed. The app company may now review the analysis and consider the suggestions. This may help them make an informed, data-driven decision regarding the next app that they will develop. .",
            "url": "https://miguelahg.github.io/mahg-data-science/python/pandas/matplotlib/2021/05/08/ProfitableAppProfiles.html",
            "relUrl": "/python/pandas/matplotlib/2021/05/08/ProfitableAppProfiles.html",
            "date": " • May 8, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I am Miguel Antonio H. Germar, but you can call me Migs. I am currently a high school student in the Philippines. I am interested in pursuing a college degree and career in Data Science. Other than this, my interests also include anime and archery. . . Contact . Email: migs.germar@gmail.com . Facebook: https://www.facebook.com/miguelantonio.germar/ . My Learning Journey . I set up this website using fastpages as a blog and portfolio for Data Science projects. Below, I outline my learning journey in Data Science. Eventually, I will make blog posts about most of the projects that I have done along the way. . How I started in Data Science . I first found out about data science in 2020, around the time that the COVID-19 pandemic started. I decided to take online courses about data science in the summer, in order to see if it was interesting. First, I took the Python Core, Data Science, and Machine learning courses on Sololearn. . Here, I learned basic skills in the following: . Python | Spyder IDE | Jupyter Noteboook | Numpy | Pandas | Matplotlib | Scikit-learn | SQL basics | . Data Science in Practical Research . When classes started again, I prioritized schoolwork. However, I was able to apply my data science skills in my group’s Practical Research project. Our research paper was entitled “The Effect of COVID-19’s Consequences on Philippine Frontliners on their Mental Health: A Descriptive, Correlational Study.” We collected survey responses from 196 frontliners. I wrote the entire analysis in Python, from data cleaning to transformation to modeling. . I had to learn new things in order to do this, including: . Statsmodels | Dummy-coding categorical variables | Multiple linear regression | Testing the assumptions of OLS regression | Interpreting and reporting p-values | . The Present: Summer of 2021 . Currently, I am working on the Data Scientist in Python course on Dataquest. The course includes many guided projects in Jupyter Notebook, and I will post each project on my blog as I go along. . I also aim to complete a few courses in the Data Scientist pathway of DOST’s Sparta project, for the sake of learning theory and concepts. . .",
          "url": "https://miguelahg.github.io/mahg-data-science/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://miguelahg.github.io/mahg-data-science/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}