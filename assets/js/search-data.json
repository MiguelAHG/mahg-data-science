{
  
    
        "post0": {
            "title": "Module 1. The Basics",
            "content": "Migs Germar 2020 Personal study notebook. App: SoloLearn Course: Machine Learning with Python Important note: This course, especially in the early parts, overlaps with the Data Science with Python course. However, they are not identical. Some things are included or not included.(omitted) Machine Learning Overview (2/8) . Machine Learning Overview (2.1) . Machine learning is a way of taking data and turning it into insights. We use computer power to analyze examples from the past to build a model that can predict the result for new examples. ML models are used in many everyday services. Netflix recommends shows based on what you and other users have watched. Amazon chooses prices based on how similar items have sold in the past. Credit card companies analyze your past activity to recognize anomalous behavior and notify you of it. This course teaches several techniques for solving ML problems. * ML can be used to create a chatbot, detect spam, or recognize images. Course Basics (2.2) . Python is one of the most common langs. used by ML professionals. very approachable and powerful We&#39;ll use several Python packages. pandas For readin data; data manipulation numpy For computations of numerical data matplotlib For graphing data scikit-learn For ML models Some basic statistics will also be reviewed. * Both theory and practice of ML techniques will be covered, and used on real examples. What&#39;s in This Course? (2.3) . Supervised and unsupervised learning Supervised There is a known target based on past data e.g., housing prices Unsupervised There is no known past answer e.g., determining the topics of restaurant reviews This course is focused on supervised learning. Within this, there are classification and regression problems. Regression predicting a continuous numerical value e.g., price of a house Classification predicting what class each data point belongs to e.g., whether or not a borrower will default on their loan This course is focused on classification problems. The examples will include: predicting who will survive the Titanic crash determining a handwritten digit from an image using biopsy data to classify if a lump is cancerous Several popular techniques will be used. Logistic regression Decision trees Random forests Neural networks At the end of the course, you&#39;ll be able to take a classification dataset, and use Python to build several different models to determine the best model for the problem. * ML can be used to solve a broad range of problems. This course is focused on supervised learning and classification. Statistics Review (3/8) . Averages (3.1) . Some simple statistics are needed when dealing with data. Mean The layman&#39;s &quot;average&quot;. The sum of a set of n numbers, divided by n. Median Also an average. The middle value when numbers are arranged in ascending/descending order. When there are 2 middle values, their mean is taken. ex. We have a dataset of ages, [15, 16, 18, 19, 22, 24, 29, 30, 34]. Mean: 23 age_list = [15, 16, 18, 19, 22, 24, 29, 30, 34] list_len = len(age_list) mean = sum(age_list) / list_len print(mean) . 23.0 . Median: 22 Percentiles (3.2) . The nth percentile of a set of data is the data point which is directly above the bottom n% of all the data. e.g., The 25th percentile is the number which is directly above the bottom 25% of all the numbers. ex. See the list of ages. The 25th percentile is 18. Knowing the range of a dataset, and important percentiles (i.e., 25th, 50th, 75th) help us understand the data. ex. In the list of ages, we know that roughly half the data lies between 18 and 29. Standard Deviation and Variance (3.3) . These are measures of spread, or how far each data point is from the mean. ex. The mean of the list of ages is 23. The ages&#39; distances from 23 are [-8, -7, -5, -4, -1, 1, 6, 7, 11]. distances = [x - mean for x in age_list] print(distances) . [-8.0, -7.0, -5.0, -4.0, -1.0, 1.0, 6.0, 7.0, 11.0] . We square these values and add them together. The sum is 362. We divide this by the size of the data set (9). 362 / 9 = 40.22. This is the variance. variance = sum([x ** 2 for x in distances]) / list_len print(variance) . 40.22222222222222 . To get the standard deviation, we take the square root of the variance. sqrt(40.22) = 6.34 import numpy as np std = np.sqrt(variance) print(std) . 6.342099196813483 . If the data were normally distributed like in a &quot;bell&quot; shaped graph, approx. 68% of the population is within 1 standard deviation of the mean. Since the mean is 23 and the std. is 6.34, we can say that approx. 68% of the population are between 16.66 and 29.34. (These are the mean +- std.) * Even though data is never a perfect, even distribution, we still use std. to gain insight on how it is distributed. Statistics with Python (3.4) . The previous ops. can be caclulated in Python using NumPy functions. e.g., `mean`, `median`, `percentile`, `std`, `var&#39; functions. For `mean`, `median`, `std` and `var`, just pass the list as the arg. For `percentile`, pass the list and the percentile (as a number between 1 and 100) as args. import numpy as np age_list = [15, 16, 18, 19, 22, 24, 29, 30, 34] print(&quot;Mean: &quot;, np.mean(age_list)) print(&quot;Median: &quot;, np.median(age_list)) print(&quot;25th Percentile: &quot;, np.percentile(age_list, 25)) print(&quot;50th Percentile (Median): &quot;, np.percentile(age_list, 50)) print(&quot;75th Percentile: &quot;, np.percentile(age_list, 50)) print(&quot;Standard Deviation: &quot;, np.std(age_list)) print(&quot;Variance: &quot;, np.var(age_list)) . Mean: 23.0 Median: 22.0 25th Percentile: 18.0 50th Percentile (Median): 22.0 75th Percentile: 22.0 Standard Deviation: 6.342099196813483 Variance: 40.22222222222222 . Reading Data with Pandas (4/8) . What is Pandas? (4.1) . A Python module that helps read and manipulate data. Data can be viewed as a human-readable table, but also interpreted numerically for computations. DataFrames are commonly used. 2D table of data. Read in Your Data (4.2) . Import pandas. import pandas as pd . We will be using a dataset of Titanic passengers. For each passenger, there will be some data, including whether or not they survived the crash. The data is stored as CSV (comma-separated values). Filename is `titanic.csv`. The `read_csv` func. takes a csv file and converts it to a DataFrame. titanic_df = pd.read_csv(&#39;titanic.csv&#39;) # This file was downloaded directly from https://sololearn.com/uploads/files/titanic.csv # Note: If the file is in a different directory from your Python file, # you need to specify the address, including the filename itself. . The `titanic_df` object is now the pandas DataFrame with the Titanic dataset. Now, use the `head` method function to see the first 5 rows. print(titanic_df.head()) . Survived Pclass Sex Age Siblings/Spouses Parents/Children Fare 0 0 3 male 22.0 1 0 7.2500 1 1 1 female 38.0 1 0 71.2833 2 1 3 female 26.0 0 0 7.9250 3 1 1 female 35.0 1 0 53.1000 4 0 3 male 35.0 0 0 8.0500 . Summarize the Data (4.3) . To see summary statistics and get a gist of the data, use the `describe` method function. pd.options.display.max_columns = 6 # This line makes sure that all 6 columns are displayed. # To have no maximum, set this to `None`. print(titanic_df.describe()) . Survived Pclass Age Siblings/Spouses Parents/Children count 887.000000 887.000000 887.000000 887.000000 887.000000 mean 0.385569 2.305524 29.471443 0.525366 0.383315 std 0.487004 0.836662 14.121908 1.104669 0.807466 min 0.000000 1.000000 0.420000 0.000000 0.000000 25% 0.000000 2.000000 20.250000 0.000000 0.000000 50% 0.000000 3.000000 28.000000 0.000000 0.000000 75% 1.000000 3.000000 38.000000 1.000000 0.000000 max 1.000000 3.000000 80.000000 8.000000 6.000000 Fare count 887.00000 mean 32.30542 std 49.78204 min 0.00000 25% 7.92500 50% 14.45420 75% 31.13750 max 512.32920 . Statistics are given for each column. But only if it is numerical. Note that the DataFrame has 7 rows, but only 6 of them have sum. stats. The &quot;Sex&quot; column is not numerical. These are the stats: count The number of rows that have a value. Each column has 887 values, indicating a total of 887 passengers, and no missing data. mean The column data&#39;s mean. std Standard deviation. min Smallest value. 25%, 50%, 75% Percentiles. max Largest value. Manipulating Data with Pandas (5/8) . Selecting a Single Column (5.1) . Syntax: df_name[&quot;col_name&quot;] ex. Select the column with passenger fares. fare_col = titanic_df[&#39;Fare&#39;] print(fare_col) . 0 7.2500 1 71.2833 2 7.9250 3 53.1000 4 8.0500 ... 882 13.0000 883 30.0000 884 23.4500 885 30.0000 886 7.7500 Name: Fare, Length: 887, dtype: float64 . The result is a pandas Series. It&#39;s like a DataFrame, but 1D (1 column only). Selecting Multiple Columns (5.2) . Syntax: df_name[[column_1, ..., column_n]] We use double square brackets, not single. We are passing a list containing the column names. Not the column names by themselves. ex. Print the first 5 rows of the &quot;Age&quot;, &quot;Sex&quot; and &quot;Survived&quot; columns. small_df = titanic_df[[&quot;Age&quot;, &quot;Sex&quot;, &quot;Survived&quot;]] print(small_df.head()) . Age Sex Survived 0 22.0 male 0 1 38.0 female 1 2 26.0 female 1 3 35.0 female 1 4 35.0 male 0 . Creating a Column (5.3) . We may want our data in a slightly different format than it originally comes in. For ex., we want the &quot;Sex&quot; column elements to be boolean values (True or False), and not strings (&quot;male&quot; or &quot;female&quot;). To make a pandas Series of boolean values where &quot;male&quot; becomes True and &quot;female&quot; becomes False: titanic_df[&quot;Sex&quot;] == &quot;male&quot; . 0 True 1 False 2 False 3 False 4 True ... 882 True 883 False 884 False 885 True 886 True Name: Sex, Length: 887, dtype: bool . Now we want to create a column &quot;Male&quot; in `titanic_df` using this Series. Afterward, we print the first 5 rows of the DF to see if the column was added. titanic_df[&quot;Male&quot;] = titanic_df[&quot;Sex&quot;] == &quot;male&quot; print(titanic_df.head()) . Survived Pclass Sex ... Parents/Children Fare Male 0 0 3 male ... 0 7.2500 True 1 1 1 female ... 0 71.2833 False 2 1 3 female ... 0 7.9250 False 3 1 1 female ... 0 53.1000 False 4 0 3 male ... 0 8.0500 True [5 rows x 8 columns] . We can see that &quot;Male&quot; is now the 8th column in the DF. Numpy Basics (6/8) . What is Numpy? (6.1) . A Python package for manipulating lists and tables of numerical data. Can be used to do numerous stat. calcs. It includes the numpy array object. We will often take data from a pd DF and put it in an np array. DFs have features that make them human-readable, but arrays are better for calculations. * Pandas was built on Numpy as its foundation. Converting from a Pandas Series to a Numpy Array (6.2) . To do this, we use the `values` method attribute. ex. Convert the &quot;Fare&quot; column to a numpy array. titanic_df[&quot;Fare&quot;].values . array([ 7.25 , 71.2833, 7.925 , 53.1 , 8.05 , 8.4583, 51.8625, 21.075 , 11.1333, 30.0708, 16.7 , 26.55 , 8.05 , 31.275 , 7.8542, 16. , 29.125 , 13. , 18. , 7.225 , 26. , 13. , 8.0292, 35.5 , 21.075 , 31.3875, 7.225 , 263. , 7.8792, 7.8958, 27.7208, 146.5208, 7.75 , 10.5 , 82.1708, 52. , 7.2292, 8.05 , 18. , 11.2417, 9.475 , 21. , 41.5792, 7.8792, 8.05 , 15.5 , 7.75 , 21.6792, 17.8 , 39.6875, 7.8 , 76.7292, 26. , 61.9792, 35.5 , 10.5 , 7.2292, 27.75 , 46.9 , 7.2292, 80. , 83.475 , 27.9 , 27.7208, 15.2458, 10.5 , 8.1583, 7.925 , 8.6625, 10.5 , 46.9 , 73.5 , 14.4542, 56.4958, 7.65 , 7.8958, 8.05 , 29. , 12.475 , 9. , 9.5 , 7.7875, 47.1 , 10.5 , 15.85 , 34.375 , 8.05 , 263. , 8.05 , 8.05 , 7.8542, 61.175 , 20.575 , 7.25 , 8.05 , 34.6542, 63.3583, 23. , 26. , 7.8958, 7.8958, 77.2875, 8.6542, 7.925 , 7.8958, 7.65 , 7.775 , 7.8958, 24.15 , 52. , 14.4542, 8.05 , 9.825 , 14.4583, 7.925 , 7.75 , 21. , 247.5208, 31.275 , 73.5 , 8.05 , 30.0708, 13. , 77.2875, 11.2417, 7.75 , 7.1417, 22.3583, 6.975 , 7.8958, 7.05 , 14.5 , 26. , 13. , 15.0458, 26.2833, 53.1 , 9.2167, 79.2 , 15.2458, 7.75 , 15.85 , 6.75 , 11.5 , 36.75 , 7.7958, 34.375 , 26. , 13. , 12.525 , 66.6 , 8.05 , 14.5 , 7.3125, 61.3792, 7.7333, 8.05 , 8.6625, 69.55 , 16.1 , 15.75 , 7.775 , 8.6625, 39.6875, 20.525 , 55. , 27.9 , 25.925 , 56.4958, 33.5 , 29.125 , 11.1333, 7.925 , 30.6958, 7.8542, 25.4667, 28.7125, 13. , 0. , 69.55 , 15.05 , 31.3875, 39. , 22.025 , 50. , 15.5 , 26.55 , 15.5 , 7.8958, 13. , 13. , 7.8542, 26. , 27.7208, 146.5208, 7.75 , 8.4042, 7.75 , 13. , 9.5 , 69.55 , 6.4958, 7.225 , 8.05 , 10.4625, 15.85 , 18.7875, 7.75 , 31. , 7.05 , 21. , 7.25 , 13. , 7.75 , 113.275 , 7.925 , 27. , 76.2917, 10.5 , 8.05 , 13. , 8.05 , 7.8958, 90. , 9.35 , 10.5 , 7.25 , 13. , 25.4667, 83.475 , 7.775 , 13.5 , 31.3875, 10.5 , 7.55 , 26. , 26.25 , 10.5 , 12.275 , 14.4542, 15.5 , 10.5 , 7.125 , 7.225 , 90. , 7.775 , 14.5 , 52.5542, 26. , 7.25 , 10.4625, 26.55 , 16.1 , 20.2125, 15.2458, 79.2 , 86.5 , 512.3292, 26. , 31.3875, 79.65 , 0. , 7.75 , 10.5 , 39.6875, 7.775 , 153.4625, 135.6333, 31. , 0. , 19.5 , 29.7 , 7.75 , 77.9583, 7.75 , 0. , 29.125 , 20.25 , 7.75 , 7.8542, 9.5 , 8.05 , 26. , 8.6625, 9.5 , 7.8958, 13. , 7.75 , 78.85 , 91.0792, 12.875 , 8.85 , 7.8958, 27.7208, 7.2292, 151.55 , 30.5 , 247.5208, 7.75 , 23.25 , 0. , 12.35 , 8.05 , 151.55 , 110.8833, 108.9 , 24. , 56.9292, 83.1583, 262.375 , 26. , 7.8958, 26.25 , 7.8542, 26. , 14. , 164.8667, 134.5 , 7.25 , 7.8958, 12.35 , 29. , 69.55 , 135.6333, 6.2375, 13. , 20.525 , 57.9792, 23.25 , 28.5 , 153.4625, 18. , 133.65 , 7.8958, 66.6 , 134.5 , 8.05 , 35.5 , 26. , 263. , 13. , 13. , 13. , 13. , 13. , 16.1 , 15.9 , 8.6625, 9.225 , 35. , 7.2292, 17.8 , 7.225 , 9.5 , 55. , 13. , 7.8792, 7.8792, 27.9 , 27.7208, 14.4542, 7.05 , 15.5 , 7.25 , 75.25 , 7.2292, 7.75 , 69.3 , 55.4417, 6.4958, 8.05 , 135.6333, 21.075 , 82.1708, 7.25 , 211.5 , 4.0125, 7.775 , 227.525 , 15.7417, 7.925 , 52. , 7.8958, 73.5 , 46.9 , 13. , 7.7292, 12. , 120. , 7.7958, 7.925 , 113.275 , 16.7 , 7.7958, 7.8542, 26. , 10.5 , 12.65 , 7.925 , 8.05 , 9.825 , 15.85 , 8.6625, 21. , 7.75 , 18.75 , 7.775 , 25.4667, 7.8958, 6.8583, 90. , 0. , 7.925 , 8.05 , 32.5 , 13. , 13. , 24.15 , 7.7333, 7.875 , 14.4 , 20.2125, 7.25 , 26. , 26. , 7.75 , 8.05 , 26.55 , 16.1 , 26. , 7.125 , 55.9 , 120. , 34.375 , 18.75 , 263. , 10.5 , 26.25 , 9.5 , 7.775 , 13. , 8.1125, 81.8583, 19.5 , 26.55 , 19.2583, 30.5 , 27.75 , 19.9667, 27.75 , 89.1042, 8.05 , 7.8958, 26.55 , 51.8625, 10.5 , 7.75 , 26.55 , 8.05 , 38.5 , 13. , 8.05 , 7.05 , 0. , 26.55 , 7.725 , 19.2583, 7.25 , 8.6625, 27.75 , 13.7917, 9.8375, 52. , 21. , 7.0458, 7.5208, 12.2875, 46.9 , 0. , 8.05 , 9.5875, 91.0792, 25.4667, 90. , 29.7 , 8.05 , 15.9 , 19.9667, 7.25 , 30.5 , 49.5042, 8.05 , 14.4583, 78.2667, 15.1 , 151.55 , 7.7958, 8.6625, 7.75 , 7.6292, 9.5875, 86.5 , 108.9 , 26. , 26.55 , 22.525 , 56.4958, 7.75 , 8.05 , 26.2875, 59.4 , 7.4958, 34.0208, 10.5 , 24.15 , 26. , 7.8958, 93.5 , 7.8958, 7.225 , 57.9792, 7.2292, 7.75 , 10.5 , 221.7792, 7.925 , 11.5 , 26. , 7.2292, 7.2292, 22.3583, 8.6625, 26.25 , 26.55 , 106.425 , 14.5 , 49.5 , 71. , 31.275 , 31.275 , 26. , 106.425 , 26. , 26. , 13.8625, 20.525 , 36.75 , 110.8833, 26. , 7.8292, 7.225 , 7.775 , 26.55 , 39.6 , 227.525 , 79.65 , 17.4 , 7.75 , 7.8958, 13.5 , 8.05 , 8.05 , 24.15 , 7.8958, 21.075 , 7.2292, 7.8542, 10.5 , 51.4792, 26.3875, 7.75 , 8.05 , 14.5 , 13. , 55.9 , 14.4583, 7.925 , 30. , 110.8833, 26. , 40.125 , 8.7125, 79.65 , 15. , 79.2 , 8.05 , 8.05 , 7.125 , 78.2667, 7.25 , 7.75 , 26. , 24.15 , 33. , 0. , 7.225 , 56.9292, 27. , 7.8958, 42.4 , 8.05 , 26.55 , 15.55 , 7.8958, 30.5 , 41.5792, 153.4625, 31.275 , 7.05 , 15.5 , 7.75 , 8.05 , 65. , 14.4 , 16.1 , 39. , 10.5 , 14.4542, 52.5542, 15.7417, 7.8542, 16.1 , 32.3208, 12.35 , 77.9583, 7.8958, 7.7333, 30. , 7.0542, 30.5 , 0. , 27.9 , 13. , 7.925 , 26.25 , 39.6875, 16.1 , 7.8542, 69.3 , 27.9 , 56.4958, 19.2583, 76.7292, 7.8958, 35.5 , 7.55 , 7.55 , 7.8958, 23. , 8.4333, 7.8292, 6.75 , 73.5 , 7.8958, 15.5 , 13. , 113.275 , 133.65 , 7.225 , 25.5875, 7.4958, 7.925 , 73.5 , 13. , 7.775 , 8.05 , 52. , 39. , 52. , 10.5 , 13. , 0. , 7.775 , 8.05 , 9.8417, 46.9 , 512.3292, 8.1375, 76.7292, 9.225 , 46.9 , 39. , 41.5792, 39.6875, 10.1708, 7.7958, 211.3375, 57. , 13.4167, 56.4958, 7.225 , 26.55 , 13.5 , 8.05 , 7.7333, 110.8833, 7.65 , 227.525 , 26.2875, 14.4542, 7.7417, 7.8542, 26. , 13.5 , 26.2875, 151.55 , 15.2458, 49.5042, 26.55 , 52. , 9.4833, 13. , 7.65 , 227.525 , 10.5 , 7.775 , 33. , 7.0542, 13. , 13. , 53.1 , 8.6625, 21. , 7.7375, 26. , 7.925 , 211.3375, 18.7875, 0. , 13. , 13. , 16.1 , 34.375 , 512.3292, 7.8958, 7.8958, 30. , 78.85 , 262.375 , 16.1 , 7.925 , 71. , 20.25 , 13. , 53.1 , 7.75 , 23. , 12.475 , 9.5 , 7.8958, 65. , 14.5 , 7.7958, 11.5 , 8.05 , 86.5 , 14.5 , 7.125 , 7.2292, 120. , 7.775 , 77.9583, 39.6 , 7.75 , 24.15 , 8.3625, 9.5 , 7.8542, 10.5 , 7.225 , 23. , 7.75 , 7.75 , 12.475 , 7.7375, 211.3375, 7.2292, 57. , 30. , 23.45 , 7.05 , 7.25 , 7.4958, 29.125 , 20.575 , 79.2 , 7.75 , 26. , 69.55 , 30.6958, 7.8958, 13. , 25.9292, 8.6833, 7.2292, 24.15 , 13. , 26.25 , 120. , 8.5167, 6.975 , 7.775 , 0. , 7.775 , 13. , 53.1 , 7.8875, 24.15 , 10.5 , 31.275 , 8.05 , 0. , 7.925 , 37.0042, 6.45 , 27.9 , 93.5 , 8.6625, 0. , 12.475 , 39.6875, 6.95 , 56.4958, 37.0042, 7.75 , 80. , 14.4542, 18.75 , 7.2292, 7.8542, 8.3 , 83.1583, 8.6625, 8.05 , 56.4958, 29.7 , 7.925 , 10.5 , 31. , 6.4375, 8.6625, 7.55 , 69.55 , 7.8958, 33. , 89.1042, 31.275 , 7.775 , 15.2458, 39.4 , 26. , 9.35 , 164.8667, 26.55 , 19.2583, 7.2292, 14.1083, 11.5 , 25.9292, 69.55 , 13. , 13. , 13.8583, 50.4958, 9.5 , 11.1333, 7.8958, 52.5542, 5. , 9. , 24. , 7.225 , 9.8458, 7.8958, 7.8958, 83.1583, 26. , 7.8958, 10.5167, 10.5 , 7.05 , 29.125 , 13. , 30. , 23.45 , 30. , 7.75 ]) . The `values` attr. returns an array. It only has 1 set of brackets, and expands in a line. Converting from a Pandas DataFrame to a Numpy Array (6.3) . We can still use the `values` method attr. on a DF. But it returns a 2D array. ex. Create an array from the &quot;Pclass&quot;, &quot;Fare&quot; and &quot;Age&quot; values. three_col_arr = titanic_df[[&quot;Pclass&quot;, &quot;Fare&quot;, &quot;Age&quot;]].values print(three_col_arr) . [[ 3. 7.25 22. ] [ 1. 71.2833 38. ] [ 3. 7.925 26. ] ... [ 3. 23.45 7. ] [ 1. 30. 26. ] [ 3. 7.75 32. ]] . The result is a 2d array. It has 2 sets of brackets, and expands in two dimensions. Numpy Shape Attribute (6.4) . We use the numpy `shape` method attribute to know the shape (and therefore size) of an array. ex. Use the array from the previous example. Get its shape. print(three_col_arr.shape) . (887, 3) . This result means that we have 887 rows and 3 columns. * Note: DFs also have a similar `shape` method attribute. More with Numpy Arrays (7/8) . Select from a Numpy Array (7.1) . Recall the example from the last part. three_col_arr = titanic_df[[&quot;Pclass&quot;, &quot;Fare&quot;, &quot;Age&quot;]].values print(three_col_arr) . [[ 3. 7.25 22. ] [ 1. 71.2833 38. ] [ 3. 7.925 26. ] ... [ 3. 23.45 7. ] [ 1. 30. 26. ] [ 3. 7.75 32. ]] . We can select a single element from an array with the syntax: arr_name[row_no, col_no] ex. Get the 1st row, 2nd column element from the example array. three_col_arr[0, 1] . 7.25 . The result is the Fare of the 1st passenger. We can also select a single row using the syntax: arr_name[row_no] ex. Take the whole row of the first passenger. three_col_arr[0] . array([ 3. , 7.25, 22. ]) . We can also select a whole column, but we have to use a slice object. Syntax: arr_name[:, col_no] ex. Get the third column of the array. #three_col_arr[:, 2] # Print the first 5 elements for brevity. three_col_arr[:, 2][:5] . array([22., 38., 26., 35., 35.]) . * Slices can be used to take more specific parts of an array. Masking (7.2) . Often, you&#39;ll want to select all rows in which certain column/s&#39; values meet certain criteria. ex. We want to take all rows of children (age under 18) from the example array. First, we create a mask. This is an array of boolean values, where True will mean that the row is a child&#39;s row. child_mask = three_col_arr[:, 2] &lt; 18 # Print the first 5 elements of the array. print(child_mask[:5]) . [False False False False False] . Now we pass the mask to the array&#39;s index. This way, it will return only the rows which correspond to True. # Print the first 5 rows for brevity. three_col_arr[child_mask][:5] . array([[ 3. , 21.075 , 2. ], [ 2. , 30.0708, 14. ], [ 3. , 16.7 , 4. ], [ 3. , 7.8542, 14. ], [ 3. , 29.125 , 2. ]]) . See that all the ages of the selected rows are under 18. Instead of declaring the mask variable and passing it to the index, we can actually do the same thing in a single line: # Print the first 5 rows for brevity. three_col_arr[three_col_arr[:, 2] &lt; 18][:5] . array([[ 3. , 21.075 , 2. ], [ 2. , 30.0708, 14. ], [ 3. , 16.7 , 4. ], [ 3. , 7.8542, 14. ], [ 3. , 29.125 , 2. ]]) . Summing and Counting (7.3) . Let&#39;s say we only want to know how many of the passengers are children. Remember that True values are 1 and False values are 0. So if we take the sum of the values in `child_mask`, we will know how many True values there are. This is how many children there are. print(child_mask.sum()) . 130 . Alternatively, without declaring the mask, we can do the same thing in one line: print((three_col_arr[:, 2] &lt; 18).sum()) . 130 . Plotting Basics (8/8) . Scatter Plot (8.1) . We can use the matplotlib library to plot data. Plotting data helps build intuition about the data. First, import `matplotlib.pyplot` with nickname `plt`. import matplotlib.pyplot as plt . Use the scatter function to plot the data. 1st arg. is the x axis; 2nd arg. is the y axis. ex. Plot passenger age against passenger fare. plt.scatter(titanic_df[&quot;Age&quot;], titanic_df[&quot;Fare&quot;]) plt.show() . Add labels so you know what the plot is about. plt.scatter(titanic_df[&quot;Age&quot;], titanic_df[&quot;Fare&quot;]) plt.xlabel(&quot;Age&quot;) plt.ylabel(&quot;Fare&quot;) plt.show() . We can also use data to color code a scatter plot. If we have multiple classes, we can give a diff. color to each class. We do this by passing to the `c` argument a pd Series where each unique value is a different class. ex. Color code passengers by their passenger class (1st, 2nd, 3rd). plt.scatter( titanic_df[&quot;Age&quot;], titanic_df[&quot;Fare&quot;], c = titanic_df[&quot;Pclass&quot;] ) plt.xlabel(&quot;Age&quot;) plt.ylabel(&quot;Fare&quot;) plt.show() . * Note: You can add a plot title and legend, but it isn&#39;t shown here. * Scatter plots are good for visualizing data, but since they&#39;re 2D, you can only use 2 features. Line (8.2) . We use the `plot` function to plot a line from a coordinate to another. ex. We eyeball a line to separate the 1st class passenger dots (purple) from the other 2 classes. plt.scatter( titanic_df[&quot;Age&quot;], titanic_df[&quot;Fare&quot;], c = titanic_df[&quot;Pclass&quot;] ) plt.xlabel(&quot;Age&quot;) plt.ylabel(&quot;Fare&quot;) plt.plot([0, 80], [85, 5]) plt.show() . We did the line manually, but later on we&#39;ll see how to do it algorithmically. End of notebook. .",
            "url": "https://miguelahg.github.io/mahg-data-science/2021/05/07/SololearnModule1.html",
            "relUrl": "/2021/05/07/SololearnModule1.html",
            "date": " • May 7, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://miguelahg.github.io/mahg-data-science/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://miguelahg.github.io/mahg-data-science/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://miguelahg.github.io/mahg-data-science/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://miguelahg.github.io/mahg-data-science/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}